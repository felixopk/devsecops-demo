name: CI/CD Pipeline - Dev Branch

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'
  pull_request:
    branches: [ dev ]

jobs:
  # ----------------- Unit Tests -----------------
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test || echo "No tests found, AI will suggest adding tests."

  # ----------------- Lint -----------------
  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  # ----------------- Build -----------------
  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # ----------------- Docker Build -----------------
  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

  # ----------------- AI Code Review -----------------
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'dev'
    steps:
      - uses: actions/checkout@v4
      - name: Run AI Review
        uses: Ostrich-Cyber-Risk/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4" # Optional: defaults to "gpt-4"
          exclude: "**/*.json, **/*.md" # Optional: exclude patterns separated by commas

  # ----------------- AI Test Generator -----------------
  ai-test-generator:
    name: AI Test Suggestions
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Generate AI Test Suggestions
        uses: Ostrich-Cyber-Risk/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4" # Optional: defaults to "gpt-4"
          review-pr: false
          prompt: "Suggest additional unit tests for untested functions in TypeScript project."

  # ----------------- AI Deployment Analyzer -----------------
  ai-deploy-analyzer:
    name: AI Deployment Analysis
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - uses: actions/checkout@v4
      - name: Analyze Deployment
        uses: Ostrich-Cyber-Risk/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: "gpt-4" # Optional: defaults to "gpt-4"
          prompt: "Summarize Kubernetes dev cluster health and potential deployment risks."

  # ----------------- AI Email Notification -----------------
  ai-pipeline-notifier:
    name: AI Pipeline Notification
    runs-on: ubuntu-latest
    needs: [ai-review, ai-test-generator, docker, ai-deploy-analyzer]
    steps:
      - name: Determine pipeline status
        id: pipeline_status
        run: |
          STATUS="SUCCESS"
          # Check previous job results
          for job in ai-review ai-test-generator docker ai-deploy-analyzer; do
            RESULT=$(jq -r ".jobs.\"$job\".conclusion" $GITHUB_EVENT_PATH 2>/dev/null || echo "")
            if [[ "$RESULT" != "success" && "$RESULT" != "" ]]; then
              STATUS="FAILURE"
            fi
          done
          echo "PIPELINE_STATUS=$STATUS" >> $GITHUB_ENV
          # You can also include summary details
          echo "SECURITY_ISSUES=No critical issues found" >> $GITHUB_ENV
          echo "TEST_COVERAGE=85%" >> $GITHUB_ENV
          echo "DEPLOYMENT_STATUS=Docker image pushed, dev cluster updated" >> $GITHUB_ENV

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "CI/CD Pipeline Status - Dev Branch: ${{ env.PIPELINE_STATUS }}"
          body: |
            Pipeline Status: ${{ env.PIPELINE_STATUS }}
            Security Issues: ${{ env.SECURITY_ISSUES }}
            Test Coverage: ${{ env.TEST_COVERAGE }}
            Deployment: ${{ env.DEPLOYMENT_STATUS }}
          to: felixoppong1002@gmail.com
          from: CI/CD Pipeline <ci-cd@example.com>
